blueprint:
  name: Motion+ Stable (0.1.1)
  homeassistant:
    min_version: 2024.4.0
  description: >
    Motion+
  domain: automation
  source_url: https://github.com/asucrews/ha-blueprints/blob/main/automations/motion_plus/motion_plus.yaml
  input:
    motion_sensor:
      name: Motion Sensor or Motion Sensor Group
      description: >
        Choose the motion sensor or group of motion sensors responsible for detecting movement within the designated area ("box").  In the "Wasp in a Box" analogy, the motion sensor plays a crucial role in identifying the presence of "wasps" (occupants) within the space.<br/>
        <br/>Please note: This input is limited to entities categorized under the binary_sensor domain and allows only a single selection.  This field and this input is required.<br/>
      selector:
        entity:
          domain:
            - binary_sensor
          multiple: false
    motion_sensor_delay:
      name: Motion off delay (Optional)
      description: >
        Set the delay time, in seconds, for the motion sensor to turn off after detecting no movement.  This option helps reduce false events triggered by activities like door openings and closings or shared spaces with multiple occupants.<br/>
        <br/>Please note that not all motion sensors behave the same way; some may have built-in delay mechanisms while others do not.  Default value: 30 seconds, Min value: 3600 seconds, and Max value: 3600 seconds. Adjust as needed if you require a different delay for the motion sensor to turn off.<br/>
      default: 30
      selector:
        number:
          mode: box
          min: 0.0
          max: 3600.0
          unit_of_measurement: seconds
          step: 1.0
    bypass_mode:
      name: Bypass Mode (Optional)
      description: >
        Select the bypass mode to control how the automation handles bypass events.  This input is optional and allows you to customize the behavior of the automation based on your preferences and requirements.<br/>
        Bypass mode determines whether the automation should ignore occupancy detection temporarily.  Depening on the option you select you need to create a input_boolean for bypass and timer helper.<br/>
        <br/>Options:<br/>
          - No Bypass: Automation operates normally without bypassing occupancy detection.<br/>
          - Bypass No Auto OFF: Automation temporarily ignores occupancy detection until manually turned off. To use this option, create an input_boolean helper entity for bypass control.<br/>
          - Bypass Auto OFF: Automation temporarily ignores occupancy detection and automatically reverts to normal operation after a specified time. To use this option, create input_boolean and timer helper entities for bypass control and automatic timer management.<br/>
        <br/>Default value: No Bypass. Only change if you intend to use this field and this input is optional.<br/>
      default: no_bypass
      selector:
        select:
          mode: dropdown
          options:
            - label: No Bypass
              value: no_bypass
            - label: Bypass No Auto OFF
              value: bypass_no_auto_off
            - label: Bypass Auto OFF
              value: bypass_auto_off
          custom_value: false
          multiple: false
          sort: false
    bypass_helper:
      name: Bypass Helper (Optional)
      description: >
        Select an input boolean entity to serve as a bypass helper within the designated area ("box").  The bypass helper enables manual control over bypass events, allowing users to override occupancy detection when necessary.<br/>
        To enable bypass for a WIAB room, manually integrate call service actions into your automations or methods.  For instance, you might configure a double-tap action on the light switch to set the bypass helper.<br/>
        To utilize this function, create an input_boolean helper entity in your Home Assistant configuration or UI.<br/>
        <br/>Default value: 'input_boolean.none'. Only change if you intend to use this field and this input is optional.<br/>
      default: "input_boolean.none"
      selector:
        entity:
          domain:
            - input_boolean
          multiple: false
    bypass_timer:
      name: Bypass Auto Off Timer (Optional)
      description: >
        Set the duration, in seconds, for the automatic cancellation of a bypass event. After the specified time elapses, the bypass mode will automatically revert to its default state.<br/>
        To utilize this function, create an timer helper entity in your Home Assistant configuration or UI.<br/>
        <br/>Default value: 'timer.none'. Only change if you intend to use this field and this input is optional.<br/>
      default: "timer.none"
      selector:
        entity:
          domain:
            - timer
          multiple: false
    bypass_finished_action:
      name: Bypass Action After Timer Finished (Optional)
      description: >
        Specify the action to be taken after the bypass auto-off timer finishes counting down.  This determines whether the automation should turn off lights or other devices when the bypass timer expires.<br/>
        <br/>Options:<br/>
        - Turn Off: Automatically turns off lights or devices when the bypass timer expires.<br/>
        - Do Nothing: Leaves lights or devices unchanged after the bypass timer expires.<br/>
        <br/>Default value: Turn Off. Only change if you intend to use this field and this input is optional.<br/>
      default: turn_off
      selector:
        select:
          mode: dropdown
          options:
            - label: Turn Off
              value: turn_off
            - label: Do Nothing
              value: do_nothing
          custom_value: false
          multiple: false
          sort: false
    idle_timer:
      name: Idle Timer (Optional)
      description: >
        Set the duration, in seconds, for the automatic cancellation of a bypass event. After the specified time elapses, the bypass mode will automatically revert to its default state.<br/>
        To utilize this function, create a timer helper entity in your Home Assistant configuration or UI. Example: Consider a closet where the door is shut, but no motion is detected and the light remains on.<br/>
        <br/>Default value: 'timer.none'. Only change if you intend to use this field and this input is optional.<br/>
      default: "timer.none"
      selector:
        entity:
          domain:
            - timer
          multiple: false

variables:
  door_sensor: !input door_sensor
  door_sensor_open_delay: !input door_sensor_open_delay
  door_sensor_close_delay: !input door_sensor_close_delay
  motion_sensor: !input motion_sensor
  motion_sensor_delay: !input motion_sensor_delay
  light_bulbs: !input light_bulbs
  light_switch: !input light_switch
  fan_switch: !input fan_switch
  occupancy_helper: !input occupancy_helper
  bypass_mode: !input bypass_mode
  bypass_helper: !input bypass_helper
  bypass_timer: !input bypass_timer
  bypass_finished_action: !input bypass_finished_action
  idle_timer: !input idle_timer
  idle_timer_restarted: false
  light_contorl: !input light_contorl
  light_control_features: !input light_control_features
  light_brightness_pct: !input light_brightness_pct
  light_temperature: !input light_temperature
  light_transition: !input light_transition

trigger:
  # If motion is detected
  - platform: state
    entity_id: !input motion_sensor
    from: "off"
    to: "on"
    id: Motion On
  # If motion is cleared
  - platform: state
    entity_id: !input motion_sensor
    from: "on"
    to: "off"
    id: Motion Off
    for: !input motion_sensor_delay
  # If bypass is enabled
  - platform: state
    entity_id: !input bypass_helper
    from: "off"
    to: "on"
    id: Bypass Turn on
  # If bypass is disabled
  - platform: state
    entity_id: !input bypass_helper
    from: "on"
    to: "off"
    id: Bypass Turn off
  # If bypass auto off timer ends
  - platform: event
    event_type: timer.finished
    event_data:
      entity_id: !input bypass_timer
    id: Bypass Timer Finished
  # If idle timer ends
  - platform: event
    event_type: timer.finished
    event_data:
      entity_id:  !input idle_timer
    id: Idle Timer Finished

action:
  # Actions to perform when the door is closed
  - choose:
      # Actions to perform when motion is detected.
      - conditions:
          - condition: and
            conditions:
              - condition: trigger
                id: Motion On
        sequence:
          # Turns on occupancy helper if it's configured
          - if:
              - condition: template
                value_template: "{{ occupancy_helper != 'input_boolean.none' }}"
            then:
              - service: homeassistant.turn_on
                data: {}
                target:
                  entity_id: !input occupancy_helper
          # Truns on light_bulbs if configured and the light is off
          - if:
              # Check if both conditions are met
              - condition: and
                conditions:
                  # Check if light_bulbs is not equal to 'light.none'
                  - condition: template
                    value_template: "{{ light_bulbs != 'light.none' }}"
                  # Check if the state of the light is "off"
                  - condition: state
                    entity_id: !input light_bulbs
                    state: "off"
            then:
              # Execute different sequences based on the value of light_control
              - choose:
                  # If light_control is set to "bulb"
                  - conditions:
                      - condition: template
                        value_template: "{{ light_control == 'bulb' }}"
                    sequence:
                      # Execute different sequences based on the number of light_control_features
                      - choose:
                          # If there's only one feature enabled
                          - conditions:
                              - condition: template
                                value_template: "{{ len(light_control_features) == 1 }}"
                            sequence:
                              # Turn on the light with specific settings based on the enabled feature
                              - choose:
                                  # If brightness control is enabled
                                  - conditions:
                                      - condition: template
                                        value_template: "{{ 'use_brightness' in light_control_features }}"
                                    sequence:
                                      - service: light.turn_on
                                        data:
                                          brightness_pct: !input light_brightness_pct
                                        target:
                                          entity_id: !input light_bulbs
                                  # If color temperature control is enabled
                                  - conditions:
                                      - condition: template
                                        value_template: "{{ 'use_colour_temperature' in light_control_features }}"
                                    sequence:
                                      - service: light.turn_on
                                        data:
                                          kelvin: !input light_temperature
                                        target:
                                          entity_id: !input light_bulbs
                                  # If transition control is enabled
                                  - conditions:
                                      - condition: template
                                        value_template: "{{ 'use_transition' in light_control_features }}"
                                    sequence:
                                      - service: light.turn_on
                                        data:
                                          transition: !input light_transition
                                        target:
                                          entity_id: !input light_bulbs
                          # If there are two features enabled
                          - conditions:
                              - condition: template
                                value_template: "{{ len(light_control_features) == 2 }}"
                            sequence:
                              # Execute different sequences based on the combination of enabled features
                              - choose:
                                  # If both brightness and color temperature control are enabled
                                  - conditions:
                                      - condition: template
                                        value_template: "{{ 'use_brightness' in light_control_features and 'use_colour_temperature' in light_control_features and not 'use_transition' in light_control_features }}"
                                    sequence:
                                      - service: light.turn_on
                                        data:
                                          kelvin: !input light_temperature
                                          brightness_pct: !input light_brightness_pct
                                        target:
                                          entity_id: !input light_bulbs
                                  # If brightness control and transition control are enabled
                                  - conditions:
                                      - condition: template
                                        value_template: "{{ 'use_brightness' in light_control_features and not 'use_colour_temperature' in light_control_features and 'use_transition' in light_control_features }}"
                                    sequence:
                                      - service: light.turn_on
                                        data:
                                          transition: !input light_transition
                                          brightness_pct: !input light_brightness_pct
                                        target:
                                          entity_id: !input light_bulbs
                                  # If color temperature control and transition control are enabled
                                  - conditions:
                                      - condition: template
                                        value_template: "{{ not 'use_brightness' in light_control_features and 'use_colour_temperature' in light_control_features and 'use_transition' in light_control_features }}"
                                    sequence:
                                      - service: light.turn_on
                                        data:
                                          transition: !input light_transition
                                          kelvin: !input light_temperature
                                        target:
                                          entity_id: !input light_bulbs
                          # If all three features are enabled
                          - conditions:
                              - condition: template
                                value_template: "{{ len(light_control_features) == 3 }}"
                            sequence:
                              # Turn on the light with specific settings (brightness 100%, color temperature 6500K) and no transition
                              - service: light.turn_on
                                data:
                                  transition: !input light_transition
                                  kelvin: !input light_temperature
                                  brightness_pct: !input light_brightness_pct
                                target:
                                  entity_id: !input light_bulbs
                # If light_control is not set to "bulb"
                default:
                  # Check if the light is still off
                  - condition: state
                    entity_id: !input light_bulbs
                    state: "off"
                  # Turn on the light using the default settings
                  - service: homeassistant.turn_on
                    target:
                      entity_id: !input light_bulbs
          # Turns on light switch if configured and currently off
          - if:
              - condition: and
                conditions:
                  - condition: template
                    value_template: "{{ light_switch != 'light.none' }}"
            then:
              - condition: state
                entity_id: !input light_switch
                state: "off"
              - service: homeassistant.turn_on
                data: {}
                target:
                  entity_id: !input light_switch
          # Turns on fan switch if configured and currently off
          - if:
              - condition: and
                conditions:
                  - condition: template
                    value_template: "{{ fan_switch != 'fan.none' }}"
            then:
              - condition: state
                entity_id: !input fan_switch
                state: "off"
              - service: homeassistant.turn_on
                data: {}
                target:
                  entity_id: !input fan_switch
          # Restart idle timer if configured
          - if:
              - condition: and
                conditions:
                  - condition: template
                    value_template: "{{ idle_timer != 'timer.none' }}"
                  - condition: state
                    entity_id: !input idle_timer
                    state: active
            then:
              - variables:
                  idle_timer_restarted: true
              - service: timer.cancel
                target:
                  entity_id: !input idle_timer
                data: {}
              - service: timer.start
                metadata: {}
                data: {}
                target:
                  entity_id: !input idle_timer
              - variables:
                  idle_timer_restarted: false
      # Actions to perform when motion is cleared
      - conditions:
          - condition: and
            conditions:
              - condition: trigger
                id: Motion Off
              - condition: state
                state: "on"
                entity_id: !input door_sensor
        sequence:
          # Enables bypass if configured
          - if:
              - condition: template
                value_template: "{{ bypass_helper != 'input_boolean.none' }}"
            then:
              - condition: state
                state: "on"
                entity_id: !input bypass_helper
              - stop: Bypass Enabled
          # Turns off occupancy helper if configured
          - if:
              - condition: template
                value_template: "{{ occupancy_helper != 'input_boolean.none' }}"
            then:
              - service: homeassistant.turn_off
                data: {}
                target:
                  entity_id: !input occupancy_helper
          # Turns off light_bulbs if configured and the light is on
          - if:
              # Check if both conditions are met
              - condition: and
                conditions:
                  # Check if light_bulbs is not equal to 'light.none'
                  - condition: template
                    value_template: "{{ light_bulbs != 'light.none' }}"
                  # Check if the state of the light is "on"
                  - condition: state
                    entity_id: !input light_bulbs
                    state: "on"
            then:
              # If light_control is set to "bulb" and transition feature is selected, turn off the light with transition
              - choose:
                  - conditions:
                      # Check if light_control is set to "bulb"
                      - condition: template
                        value_template: "{{ light_control == 'bulb' }}"
                    sequence:
                      # Turn off the light with transition if transition feature is selected
                      - choose:
                          - conditions:
                              # Check if transition feature is selected
                              - condition: template
                                value_template: "{{ 'use_transition' in light_control_features }}"
                            sequence:
                              # Turn off the light with specific settings
                              - service: light.turn_off
                                data:
                                  transition: !input light_transition
                                target:
                                  entity_id: !input light_bulbs
                        default:
                          # If conditions are not met, turn off the light without considering light_control or selected features
                          - service: light.turn_off
                            target:
                              entity_id: !input light_bulbs
                default:
                  # If conditions are not met, turn off the light without considering light_control or selected features
                  - service: light.turn_off
                    target:
                      entity_id: !input light_bulbs
          # Turns off light switch if configured and currently on
          - if:
              - condition: and
                conditions:
                  - condition: template
                    value_template: "{{ light_switch != 'light.none' }}"
            then:
              - condition: state
                entity_id: !input light_switch
                state: "on"
              - service: homeassistant.turn_off
                data: {}
                target:
                  entity_id: !input light_switch
          # Turns off fan switch if configured and currently on
          - if:
              - condition: and
                conditions:
                  - condition: template
                    value_template: "{{ fan_switch != 'fan.none' }}"
            then:
              - condition: state
                entity_id: !input fan_switch
                state: "on"
              - service: homeassistant.turn_off
                data: {}
                target:
                  entity_id: !input fan_switch
      # Actions to perform when bypass is turned on
      - conditions:
          - condition: and
            conditions:
              - condition: trigger
                id: Bypass Turn on
              - condition: template
                value_template: "{{ bypass_helper != 'input_boolean.none' }}"
        sequence:
          # Starts bypass timer if configured
          - if:
              - condition: template
                value_template: "{{ bypass_timer != 'timer.none' }}"
            then:
              - service: timer.start
                metadata: {}
                data: {}
                target:
                  entity_id: !input bypass_timer
      # Actions to perform when bypass is turned off
      - conditions:
          - condition: and
            conditions:
              - condition: trigger
                id: Bypass Turn off
              - condition: template
                value_template: "{{ bypass_helper != 'input_boolean.none' }}"
              - condition: not
                conditions:
                  - condition: trigger
                    id: Bypass Timer Finished
        sequence:
          # Finishes bypass timer if configured
          - if:
              - condition: template
                value_template: "{{ bypass_timer != 'timer.none' }}"
            then:
              - service: timer.finish
                metadata: {}
                data: {}
                target:
                  entity_id: !input bypass_timer
      # Actions to perform when bypass timer finishes
      - conditions:
          - condition: and
            conditions:
              - condition: trigger
                id: Bypass Timer Finished
              - condition: template
                value_template: "{{ bypass_mode == 'bypass_auto_off' }}"
        sequence:
          # Turns off bypass if configured
          - if:
              - condition: template
                value_template: "{{ bypass_helper != 'input_boolean.none' }}"
            then:
              - service: homeassistant.turn_off
                metadata: {}
                data: {}
                target:
                  entity_id: !input bypass_helper
          # Performs additional actions if specified when bypass timer finishes
          - if:
              - condition: and
                conditions:
                  - condition: template
                    value_template: "{{ bypass_finished_action == 'turn_off' }}"
            then:
              # Turns off occupancy helper if configured
              - if:
                  - condition: template
                    value_template: "{{ occupancy_helper != 'input_boolean.none' }}"
                then:
                  - service: homeassistant.turn_off
                    data: {}
                    target:
                      entity_id: !input occupancy_helper
              # Turns off light bulbs if configured and currently on
              - if:
                  - condition: and
                    conditions:
                      - condition: template
                        value_template: "{{ light_bulbs != 'light.none' }}"
                then:
                  - condition: state
                    entity_id: !input light_bulbs
                    state: "on"
                  - service: homeassistant.turn_off
                    data: {}
                    target:
                      entity_id: !input light_bulbs
              # Turns off light switch if configured and currently on
              - if:
                  - condition: and
                    conditions:
                      - condition: template
                        value_template: "{{ light_switch != 'light.none' }}"
                then:
                  - condition: state
                    entity_id: !input light_switch
                    state: "on"
                  - service: homeassistant.turn_off
                    data: {}
                    target:
                      entity_id: !input light_switch
              # Turns off fan switch if configured and currently on
              - if:
                  - condition: and
                    conditions:
                      - condition: template
                        value_template: "{{ fan_switch != 'fan.none' }}"
                then:
                  - condition: state
                    entity_id: !input fan_switch
                    state: "on"
                  - service: homeassistant.turn_off
                    data: {}
                    target:
                      entity_id: !input fan_switch
      # Actions to perform when idle timer finishes
      - conditions:
          - condition: and
            conditions:
              - condition: trigger
                id: Idle Timer Finished
              - condition: template
                value_template: "{{ idle_timer != 'timer.none' }}"
        sequence:
          # Enables bypass if configured and conditions are met
          - if:
              - condition: template
                value_template: "{{ bypass_helper != 'input_boolean.none' }}"
            then:
              - condition: state
                state: "on"
                entity_id: !input bypass_helper
              - stop: Bypass Enabled
          # Turns off various devices if idle timer conditions are met
          - if:
              - condition: and
                conditions:
                  - condition: state
                    state: "off"
                    entity_id: !input motion_sensor
                  - condition: state
                    state: "off"
                    entity_id: !input door_sensor
                  - condition: template
                    value_template: "{{ idle_timer_restarted == false }}"
            then:
              # Turns off occupancy helper if configured
              - if:
                  - condition: template
                    value_template: "{{ occupancy_helper != 'input_boolean.none' }}"
                then:
                  - service: homeassistant.turn_off
                    data: {}
                    target:
                      entity_id: !input occupancy_helper
              # Turns off light_bulbs if configured and the light is on
              - if:
                  # Check if both conditions are met
                  - condition: and
                    conditions:
                      # Check if light_bulbs is not equal to 'light.none'
                      - condition: template
                        value_template: "{{ light_bulbs != 'light.none' }}"
                      # Check if the state of the light is "on"
                      - condition: state
                        entity_id: !input light_bulbs
                        state: "on"
                then:
                  # If light_control is set to "bulb" and transition feature is selected, turn off the light with transition
                  - choose:
                      - conditions:
                          # Check if light_control is set to "bulb"
                          - condition: template
                            value_template: "{{ light_control == 'bulb' }}"
                        sequence:
                          # Turn off the light with transition if transition feature is selected
                          - choose:
                              - conditions:
                                  # Check if transition feature is selected
                                  - condition: template
                                    value_template: "{{ 'use_transition' in light_control_features }}"
                                sequence:
                                  # Turn off the light with specific settings
                                  - service: light.turn_off
                                    data:
                                      transition: !input light_transition
                                    target:
                                      entity_id: !input light_bulbs
                            default:
                              # If conditions are not met, turn off the light without considering light_control or selected features
                              - service: light.turn_off
                                target:
                                  entity_id: !input light_bulbs
                    default:
                      # If conditions are not met, turn off the light without considering light_control or selected features
                      - service: light.turn_off
                        target:
                          entity_id: !input light_bulbs
              # Turns off light switch if configured and currently on
              - if:
                  - condition: and
                    conditions:
                      - condition: template
                        value_template: "{{ light_switch != 'light.none' }}"
                then:
                  - condition: state
                    entity_id: !input light_switch
                    state: "on"
                  - service: homeassistant.turn_off
                    data: {}
                    target:
                      entity_id: !input light_switch
              # Turns off fan switch if configured and currently on
              - if:
                  - condition: and
                    conditions:
                      - condition: template
                        value_template: "{{ fan_switch != 'fan.none' }}"
                then:
                  - condition: state
                    entity_id: !input fan_switch
                    state: "on"
                  - service: homeassistant.turn_off
                    data: {}
                    target:
                      entity_id: !input fan_switch

          # Enables bypass if configured
          - if:
              - condition: template
                value_template: "{{ bypass_helper != 'input_boolean.none' }}"
            then:
              - condition: state
                state: "on"
                entity_id: !input bypass_helper
              - stop: Bypass Enabled
          # Restarts idle timer if configured and conditions are met
          - if:
              - condition: state
                entity_id: !input idle_timer
                state: active
            then:
              - variables:
                  idle_timer_restarted: true
              - service: timer.cancel
                target:
                  entity_id: !input idle_timer
                data: {}
              - service: timer.start
                metadata: {}
                data: {}
                target:
                  entity_id: !input idle_timer
              - variables:
                  idle_timer_restarted: false
            # Starts idle timer if configured and conditions are not met
            else:
              - service: timer.start
                metadata: {}
                data: {}
                target:
                  entity_id: !input idle_timer
mode: queued
max: 5
