blueprint:
  name: Lock Management Stable (0.4.0)
  homeassistant:
    min_version: 2024.4.0
  description: lock Management
  domain: automation
  source_url: https://github.com/asucrews/ha-blueprints/blob/main/automations/lock_management/lock_management.yaml
  input:
    lock:
      name: Lock
      description: Lock
      selector:
        entity:
          domain:
            - lock
          multiple: false
    door_sensor:
      name: Door Sensor or Door Sensor Group
      description: >
        Select the door sensor or group of door sensors where occupancy is detected.<br/>
        <br/>Please note: This input is restricted to entities within the binary_sensor domain and allows only a single selection.  This field and this input is optional.<br/>
      default: binary_sensor.none
      selector:
        entity:
          domain:
            - binary_sensor
          multiple: false
    auto_lock_timer:
      name: Auto Lock Timer
      description: Auto Lock Timer
      default: timer.none
      selector:
        entity:
          domain:
            - timer
          multiple: false
    notify_group:
      name: Easy Notify Group - Devices Notified (Optional)
      description: If you've enabled device notifications above, please select the devices to receive the notifications.
      default: ""

variables:
  lock: !input lock
  door_sensor: !input door_sensor
  auto_lock_timer: !input auto_lock_timer
  notify_group: !input notify_group

trigger:
  - platform: event
    event_type: lock_code_manager_lock_state_changed
    event_data:
      entity_id: !input lock
    id: LCM Event
  - platform: event
    event_type: timer.finished
    event_data:
      entity_id: !input auto_lock_timer
    id: Timer Finished

action:
  - choose:
      - conditions:
          - condition: trigger
            id:
              - LCM Event
        sequence:
          - variables:
              lock_state: "{{ trigger.event.data.state }}"
              code_slot: "{{ trigger.event.data.code_slot }}"
              code_slot_name: "{{ trigger.event.data.code_slot_name }}"
              action_text: "{{ trigger.event.data.action_text }}"
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ lock_state == 'locked' }}"
                sequence:
                  - if:
                      - condition: template
                        value_template: "{{ auto_lock_timer != 'timer.none' }}"
                    then:
                      - if:
                          - condition: state
                            entity_id: !input auto_lock_timer
                            state: active
                        then:
                          - service: timer.cancel
                            metadata: {}
                            data: {}
                            target:
                              entity_id: !input auto_lock_timer
                  - if:
                      - condition: template
                        value_template: "{{ notify_group is defined }}"
                    then:
                      - service: notify.{{ notify_group }}
                        data:
                          title: "{{ device_attr(lock, 'name') }} | {{ states('sensor.time') }}"
                          message: >
                            {% if code_slot > 0 %}
                              {{ device_attr(lock, 'name') }} was locked by {{ code_slot_name }}
                            {% else %}
                              {{ device_attr(lock, 'name') }} was locked
                            {% endif %}
                          data:
                            ttl: 0
                            priority: high
                            tag: "tag-{{ trigger.entity_id }}"
              - conditions:
                  - condition: template
                    value_template: "{{ lock_state == 'unlocked' }}"
                sequence:
                  - if:
                      - condition: template
                        value_template: "{{ auto_lock_timer != 'timer.none' }}"
                    then:
                      - if:
                          - condition: state
                            entity_id: !input auto_lock_timer
                            state: active
                        then:
                          - service: timer.cancel
                            metadata: {}
                            data: {}
                            target:
                              entity_id: !input auto_lock_timer
                          - service: timer.start
                            metadata: {}
                            data: {}
                            target:
                              entity_id: !input auto_lock_timer
                        else:
                          - service: timer.start
                            metadata: {}
                            data: {}
                            target:
                              entity_id: !input auto_lock_timer
                  - if:
                      - condition: template
                        value_template: "{{ notify_group is defined }}"
                    then:
                      - service: notify.{{ notify_group }}
                        data:
                          title: "{{ device_attr(lock, 'name') }} | {{ states('sensor.time') }}"
                          message: >
                            {% if code_slot > 0 %}
                              {{ device_attr(lock, 'name') }} was unlocked by {{ code_slot_name }}
                            {% else %}
                              {{ device_attr(lock, 'name') }} was unlocked
                            {% endif %}
                          data:
                            ttl: 0
                            priority: high
                            tag: "tag-{{ trigger.entity_id }}"
      - conditions:
          - condition: and
            conditions:
              - condition: template
                value_template: "{{ auto_lock_timer != 'timer.none' }}"
              - condition: trigger
                id:
                  - Timer Finished
        sequence:
          - if:
              - condition: and
                conditions:
                  - condition: template
                    value_template: "{{ is_state(door_sensor, ['on']) }}"
                  - condition: template
                    value_template: "{{ door_sensor != 'binary_sensor.none' }}"
            then:
              - service: timer.cancel
                target:
                  entity_id: !input auto_lock_timer
                data: {}
              - service: timer.start
                metadata: {}
                data: {}
                target:
                  entity_id: !input auto_lock_timer
            else:
              - service: lock.lock
                metadata: {}
                data: {}
                target:
                  entity_id: !input lock
mode: queued
max: 5
