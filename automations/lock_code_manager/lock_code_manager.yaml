blueprint:
  name: Lock Management (0.1.0rc8)
  description: >
    <br/>
    <br/>
  domain: automation
  source_url: https://github.com/asucrews/ha-blueprints/blob/main/automations/lock_code_manager/lock_code_manager.yaml
  input:
    lock_name:
      name: Lock Entity
      description: Lock Entity
      selector:
        entity:
          domain:
          - lock
          multiple: false
    lock_auto_timer:
      name: Lock Auto Timer
      description: Lock Auto Timer
      default: 0
      selector:
        number:
          mode: box
          min: 0.0
          max: 300.0
          unit_of_measurement: seconds
          step: 1.0

variables:
  lock_name: !input lock_name
  lock_auto_timer: !input lock_auto_timer

trigger:
  - platform: event
    event_type: lock_code_manager_lock_state_changed
    id: Lock Code Manager Event
  - platform: state
    entity_id:
      - !input lock_auto_timer
    from: active
    to: idle
    id: Timer Finished

action:


  - choose:
      - conditions:
          - condition: trigger
            id:
              - Lock Code Manager Event
        sequence:
          - variables:
              lock_state: "{{ trigger.event.data.state }}"
              code_slot: "{{ trigger.event.data.code_slot }}"
              code_slot_name: "{{ trigger.event.data.code_slot_name }}"
              action_text: "{{ trigger.event.data.action_text }}"
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ lock_state == 'locked' }}"
                sequence:
                  - if:
                      - condition: state
                        entity_id: !input lock_auto_timer
                        state: active
                    then:
                      - service: timer.cancel
                        metadata: {}
                        data: {}
                        target:
                          entity_id: !input lock_auto_timer
              - conditions:
                  - condition: template
                    value_template: "{{ lock_state == 'unlocked' }}"
                sequence: []
                  - if:
                      - condition: template
                        value_template: "{{ lock_auto_timer < '0' }}"
                    then:
                      - if:
                          - condition: state
                            entity_id: !input lock_auto_timer
                            state: active
                        then:
                          - service: timer.cancel
                            metadata: {}
                            data: {}
                            target:
                              entity_id: !input lock_auto_timer
                          - service: timer.start
                            metadata: {}
                            data: {}
                            target:
                              entity_id: !input lock_auto_timer
                        else:
                          - service: timer.start
                            metadata: {}
                            data: {}
                            target:
                              entity_id: !input lock_auto_timer
      - conditions:
          - condition: and
            conditions:
            - condition: template
              value_template: "{{ lock_auto_timer < '0' }}"
            - condition: trigger
              id:
                - Timer Finished
        sequence:
          - service: lock.lock
            metadata: {}
            data: {}
            target:
              entity_id: !input lock_name