blueprint:
  name: "Binary Sensor Notification (0.1.0rc1)"
  description: "Send a notification or trigger a custom action depending on the state switch of a binary_sensor"
  source_url: https://github.com/asucrews/ha-blueprints/blob/main/automations/binary_sensor_notifications_plus/binary_sensor_notifications_plus.yaml
  domain: automation
  input:
    required_entities:
      name: Required Entities
      description: The required entities for this automation
      input:
        sensor_entity:
          name: "Sensor"
          description: "Sensor which triggers the notification."
          selector:
            entity:
              domain: binary_sensor
        left_open_timer_helper:
          name: "Left Open Timer Helper"
          description: "Left Open Timer Helper"
          default: timer.none
          selector:
            entity:
              domain: timer
    notification_entities:
      name: Notification Settings
      description: Optinoal notification entity
      input:
        notify_group:
          name: Notification Group
          description: "The name of the notification group to call. ('notify' for all devices)"
          default: ""
        title:
          name: "Title"
          description: "Notification title"
        message_open:
          name: "Message when entity is on"
          description: "Message to be sent"
        message_close:
          name: "Message when entity is off"
          description: "Message to be sent"
        message_left:
          name: "Message when entity is on for extended period of time"
          description: "Message to be sent"
    debounce_duration:
      name: "Debounce duration"
      description: "Duration time the notification won't be sent again after sensor changed its state."
      default: 10
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: "s"
          mode: slider
          step: 1

variables:
  sensor_entity: !input sensor_entity
  debounce_duration: !input debounce_duration
  left_open_timer_helper: !input left_open_timer_helper
  title: !input title
  message_open: !input message_open
  message_close: !input message_close
  message_left: !input message_left

trigger:
  - platform: state
    entity_id: !input "sensor_entity"
    to: "off"
    from: "on"
    id: Opened
  - platform: state
    entity_id: !input "sensor_entity"
    to: "on"
    from: "off"
    id: Closed
  - platform: event
    event_type: timer.finished
    event_data:
      entity_id: !input aleft_open_timer_helper
    id: Timer Finished

condition:
  condition: template
  value_template: >-
    {{ iif(this.attributes.last_triggered == None, 9999, as_timestamp(now()) - as_timestamp(this.attributes.last_triggered, default=0) ) >= (debounce_duration | int) }}

action:
  - choose:
      - conditions:
          - condition: trigger
            id:
              - Opened
        sequence:
          - service: "notify.{{ group_target }}"
            data:
              title: "{{ title }} | {{ states('sensor.time') }}"
              message: "{{ message }}"
              data:
                ttl: 0
                priority: high
                tag: tag-binary-sensor-notification
      - conditions:
          - condition: trigger
            id:
              - Closed
        sequence:
          - service: "notify.{{ group_target }}"
            data:
              title: "{{ title }} | {{ states('sensor.time') }}"
              message: "{{ message }}"
              data:
                ttl: 0
                priority: high
                tag: tag-binary-sensor-notification
