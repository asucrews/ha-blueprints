# Truns on light_bulbs if configured and the light is off
- if:
    # Check if both conditions are met
    - condition: and
      conditions:
        # Check if light_bulbs is not equal to 'light.none'
        - condition: template
          value_template: "{{ light_bulbs != 'light.none' }}"
        # Check if the state of the light is "off"
        - condition: state
          entity_id: !input light_bulbs
          state: "off"
  then:
    # Execute different sequences based on the value of light_control
    - choose:
        # If light_control is set to "bulb"
        - conditions:
            - condition: template
              value_template: "{{ light_control == 'bulb' }}"
          sequence:
            # Execute different sequences based on the number of light_control_features
            - choose:
                # If there's only one feature enabled
                - conditions:
                    - condition: template
                      value_template: "{{ light_control_features | list | length  == 1 }}"
                  sequence:
                    # Turn on the light with specific settings based on the enabled feature
                    - choose:
                        # If brightness control is enabled
                        - conditions:
                            - condition: template
                              value_template: "{{ 'use_brightness' in light_control_features }}"
                          sequence:
                            - action: light.turn_on
                              data:
                                brightness_pct: !input light_brightness_pct
                              target:
                                entity_id: !input light_bulbs
                        # If color temperature control is enabled
                        - conditions:
                            - condition: template
                              value_template: "{{ 'use_colour_temperature' in light_control_features }}"
                          sequence:
                            - action: light.turn_on
                              data:
                                kelvin: !input light_temperature
                              target:
                                entity_id: !input light_bulbs
                        # If transition control is enabled
                        - conditions:
                            - condition: template
                              value_template: "{{ 'use_transition' in light_control_features }}"
                          sequence:
                            - action: light.turn_on
                              data:
                                transition: !input light_transition
                              target:
                                entity_id: !input light_bulbs
                # If there are two features enabled
                - conditions:
                    - condition: template
                      value_template: "{{ light_control_features | list | length  == 2 }}"
                  sequence:
                    # Execute different sequences based on the combination of enabled features
                    - choose:
                        # If both brightness and color temperature control are enabled
                        - conditions:
                            - condition: template
                              value_template: "{{ 'use_brightness' in light_control_features and 'use_colour_temperature' in light_control_features and not 'use_transition' in light_control_features }}"
                          sequence:
                            - action: light.turn_on
                              data:
                                kelvin: !input light_temperature
                                brightness_pct: !input light_brightness_pct
                              target:
                                entity_id: !input light_bulbs
                        # If brightness control and transition control are enabled
                        - conditions:
                            - condition: template
                              value_template: "{{ 'use_brightness' in light_control_features and not 'use_colour_temperature' in light_control_features and 'use_transition' in light_control_features }}"
                          sequence:
                            - action: light.turn_on
                              data:
                                transition: !input light_transition
                                brightness_pct: !input light_brightness_pct
                              target:
                                entity_id: !input light_bulbs
                        # If color temperature control and transition control are enabled
                        - conditions:
                            - condition: template
                              value_template: "{{ not 'use_brightness' in light_control_features and 'use_colour_temperature' in light_control_features and 'use_transition' in light_control_features }}"
                          sequence:
                            - action: light.turn_on
                              data:
                                transition: !input light_transition
                                kelvin: !input light_temperature
                              target:
                                entity_id: !input light_bulbs
                # If all three features are enabled
                - conditions:
                    - condition: template
                      value_template: "{{ light_control_features | list | length  == 3 }}"
                  sequence:
                    # Turn on the light with specific settings (brightness 100%, color temperature 6500K) and no transition
                    - action: light.turn_on
                      data:
                        transition: !input light_transition
                        kelvin: !input light_temperature
                        brightness_pct: !input light_brightness_pct
                      target:
                        entity_id: !input light_bulbs
      # If light_control is not set to "bulb"
      default:
        # Check if the light is still off
        - condition: state
          entity_id: !input light_bulbs
          state: "off"
        # Turn on the light using the default settings
        - action: homeassistant.turn_on
          target:
            entity_id: !input light_bulbs
