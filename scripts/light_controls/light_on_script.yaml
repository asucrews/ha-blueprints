blueprint:
  name: Turn Light On Script (3.0.0)
  description: >
    Smart script to turn on lights based on automation bypass and device availability.
    If 'automation_bypass' is ON, all automation logic is skipped and the lights are not affected by the automation.
    If OFF, the script checks if any lights in 'lights_to_check' are unavailable for over 1 minute,
    and if so, sets a Z-Wave parameter before turning on the specified switch.
  domain: script
  homeassistant:
    min_version: 2025.6.0
  source_url: https://github.com/asucrews/ha-blueprints/blob/main/scripts/light_controls/light_on_script.yaml
  author: Jeremy Crews

  input:
    automation_bypass:
      name: Automation Bypass
      description: >
        When ON, bypasses availability checks and disables automation logic.
      selector:
        entity:
          domain: input_boolean
          multiple: false

    lights_to_check:
      name: Lights to check for "unavailable"
      default: []
      selector:
        entity:
          domain: light
          multiple: true

    light_switch:
      name: Light Switch
      default: []
      selector:
        target:
          entity:
            - domain: light

    light_group:
      name: Light Group
      default: []
      selector:
        target:
          entity:
            - domain: light

    fan:
      name: Fan
      default: []
      selector:
        target:
          entity:
            - domain: fan
            - domain: light

    zwave_switch:
      name: Z-Wave Device ID
      description: Device ID for setting Z-Wave parameters
      default: []
      selector:
        device:
          filter:
            - integration: zwave_js
          multiple: false

    zwave_config_delay:
      name: Z-Wave Config Delay
      description: Time to wait after turning on the light before resetting Z-Wave mode
      default: 2
      selector:
        number:
          min: 1.0
          max: 10.0
          unit_of_measurement: seconds
          mode: slider
          step: 1.0

    brightness_pct:
      name: Brightness Level
      description: >
        Set the brightness percentage for lights. Defaults to 100% if not specified.
      default: 100
      selector:
        number:
          min: 1.0
          max: 100.0
          unit_of_measurement: "%"
          mode: slider
          step: 1.0

variables:
  light_switch: !input light_switch
  light_group: !input light_group
  fan_switch: !input fan
  zwave_switch: !input zwave_switch
  light_switch_entity_id: "{{ light_switch.entity_id if 'entity_id' in light_switch else 'light.none' }}"
  light_group_entity_id: "{{ light_group.entity_id if 'entity_id' in light_group else 'light.none' }}"
  fan_entity_id: "{{ fan_switch.entity_id if 'entity_id' in fan_switch else 'fan.none' }}"
  zwave_device_id: "{{ zwave_switch.device_id if 'device_id' in zwave_switch else '00000000000000000000000000000000'}}"

sequence:
  - variables:
      unavailable_detected: false

  - repeat:
      for_each: !input lights_to_check
      sequence:
        - condition: template
          value_template: >
            {{ is_state(repeat.item, 'unavailable') and
               (now() - states[repeat.item].last_changed).total_seconds() > 60 }}
        - variables:
            unavailable_detected: true

  - choose:
      - conditions:
          - condition: state
            entity_id: !input automation_bypass
            state: "off"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ unavailable_detected }}"
                sequence:
                  - if:
                      - condition: template
                        value_template: "{{ zwave_device_id != '00000000000000000000000000000000' }}"
                    then:
                      - action: zwave_js.set_config_parameter
                        data:
                          parameter: 52
                          value: 0
                          endpoint: 0
                        target:
                          device_id: "{{ zwave_device_id }}"

                  - if:
                      - condition: template
                        value_template: "{{ light_group_entity_id != 'light.none' }}"
                    then:
                      - action: light.turn_on
                        target:
                          entity_id: "{{ light_group_entity_id }}"

                  - if:
                      - condition: template
                        value_template: "{{ fan_entity_id != 'fan.none' }}"
                    then:
                      - action: homeassistant.turn_on
                        target:
                          entity_id: "{{ fan_entity_id }}"

                  - if:
                      - condition: template
                        value_template: "{{ zwave_device_id != '00000000000000000000000000000000' }}"
                    then:
                      - delay:
                          seconds: !input zwave_config_delay
                      - action: zwave_js.set_config_parameter
                        data:
                          parameter: 52
                          value: 1
                          endpoint: 0
                        target:
                          device_id: "{{ zwave_device_id }}"

            default:
              - if:
                  - condition: state
                    entity_id: switch.circadian_lighting_loft
                    state: "on"
                then:
                  - if:
                     - condition: template
                       value_template: "{{ light_group_entity_id != 'light.none' }}"
                    then:
                      - action: light.turn_on
                        data:
                          color_temp_kelvin: "{{ state_attr('sensor.circadian_values', 'colortemp') | int }}"
                          brightness_pct: !input brightness_pct
                        target:
                          entity_id: "{{ light_group_entity_id }}"
                else:
                  - if:
                     - condition: template
                       value_template: "{{ light_group_entity_id != 'light.none' }}"
                    then:
                      - action: light.turn_on
                        data:
                          brightness_pct: !input brightness_pct
                          color_temp_kelvin: 6500
                        target:
                          entity_id: "{{ light_group_entity_id }}"

              - if:
                  - condition: template
                    value_template: "{{ light_switch_entity_id != 'light.none' }}"
                then:
                  - action: light.turn_on
                    data:
                      brightness_pct: !input brightness_pct
                    target:
                      entity_id: "{{ light_switch_entity_id }}"

              - if:
                  - condition: template
                    value_template: "{{ fan_entity_id != 'fan.none' }}"
                then:
                  - action: fan.turn_on
                    target:
                      entity_id: "{{ fan_entity_id }}"

